#version 460

layout(local_size_x = 256) in;

struct Vertex {
    vec3 position;
    vec3 normal;
    vec2 texCoord;
    vec4 instanceColor;
};

struct Voxel {
    uint morton;
    uint section;
    uint color;
    vec3 normal;
};

layout(std430, set = 0, binding = 0) readonly buffer VertexBuffer {
    Vertex vertices[];
};

layout(std430, set = 0, binding = 1) readonly buffer IndexBuffer {
    uint indices[];
};

layout(std430, set = 0, binding = 2) buffer VoxelBuffer {
    Voxel voxels[];
};

layout(std430, set = 0, binding = 3) buffer VoxelCountBuffer {
    uint voxelCount;
};

layout(push_constant) uniform PushConstants {
    vec3 voxelGridSize;
    float voxelSize;
    vec3 gridOrigin;
    uint maxVoxels;
    vec3 gridOffset;
    uint triangleOffset;
    uint triangleCount;
} constants;

// Morton code utilities
uint expandBits(uint v) {
    v = (v * 0x00010001u) & 0xFF0000FFu;
    v = (v * 0x00000101u) & 0x0F00F00Fu;
    v = (v * 0x00000011u) & 0xC30C30C3u;
    v = (v * 0x00000005u) & 0x49249249u;
    return v;
}

uint morton3D(uvec3 pos) {
    return (expandBits(pos.z) << 2) + (expandBits(pos.y) << 1) + expandBits(pos.x);
}

// Convert world position to grid position
uvec3 worldToGrid(vec3 worldPos) {
    vec3 localPos = worldPos - constants.gridOrigin - constants.gridOffset;
    vec3 normalizedPos = localPos / constants.voxelSize;
    return uvec3(clamp(normalizedPos, vec3(0), constants.voxelGridSize - vec3(1)));
}

// Atomic voxel insertion
void insertVoxel(uvec3 gridPos, vec3 normal, vec4 color) {
    uint morton = morton3D(gridPos);
    uint section = (gridPos.x / 4) + (gridPos.y / 4) * (uint(constants.voxelGridSize.x) / 4) +
    (gridPos.z / 4) * (uint(constants.voxelGridSize.x) / 4) * (uint(constants.voxelGridSize.y) / 4);

    // Pack color into uint (RGBA8 format)
    uint packedColor = uint(color.r * 255.0) |
    (uint(color.g * 255.0) << 8) |
    (uint(color.b * 255.0) << 16) |
    (uint(color.a * 255.0) << 24);

    // Atomic insertion
    uint index = atomicAdd(voxelCount, 1);
    if (index < constants.maxVoxels) {
        voxels[index].morton = morton;
        voxels[index].section = section;
        voxels[index].color = packedColor;
        voxels[index].normal = normal;
    }
}

vec3 barycentric(vec3 p, vec3 a, vec3 b, vec3 c) {
    vec3 v0 = b - a;
    vec3 v1 = c - a;
    vec3 v2 = p - a;

    float d00 = dot(v0, v0);
    float d01 = dot(v0, v1);
    float d11 = dot(v1, v1);
    float d20 = dot(v2, v0);
    float d21 = dot(v2, v1);

    float denom = d00 * d11 - d01 * d01;
    float v = (d11 * d20 - d01 * d21) / denom;
    float w = (d00 * d21 - d01 * d20) / denom;
    float u = 1.0 - v - w;

    return vec3(u, v, w);
}

void voxelizeTriangle(uint triangleIndex) {
    // Get triangle vertices
    uint i0 = indices[triangleIndex * 3];
    uint i1 = indices[triangleIndex * 3 + 1];
    uint i2 = indices[triangleIndex * 3 + 2];

    vec3 v0 = vertices[i0].position;
    vec3 v1 = vertices[i1].position;
    vec3 v2 = vertices[i2].position;

    // Calculate triangle normal and area
    vec3 edge1 = v1 - v0;
    vec3 edge2 = v2 - v0;
    vec3 normal = normalize(cross(edge1, edge2));

    // Calculate triangle bounds in grid space
    uvec3 minGrid = worldToGrid(min(min(v0, v1), v2));
    uvec3 maxGrid = worldToGrid(max(max(v0, v1), v2));

    // Interpolate vertex colors
    vec4 c0 = vertices[i0].instanceColor;
    vec4 c1 = vertices[i1].instanceColor;
    vec4 c2 = vertices[i2].instanceColor;

    // Voxelize the triangle using a 3D variant of the scanline algorithm
    for (uint z = minGrid.z; z <= maxGrid.z; z++) {
        for (uint y = minGrid.y; y <= maxGrid.y; y++) {
            for (uint x = minGrid.x; x <= maxGrid.x; x++) {
                // Calculate voxel center in world space
                vec3 voxelCenter = constants.gridOrigin + constants.gridOffset +
                vec3(x, y, z) * constants.voxelSize +
                vec3(constants.voxelSize * 0.5);

                // Check if voxel center is inside triangle
                vec3 bary = barycentric(voxelCenter, v0, v1, v2);
                if (bary.x >= 0.0 && bary.y >= 0.0 && bary.z >= 0.0) {
                    // Interpolate color using barycentric coordinates
                    vec4 color = c0 * bary.x + c1 * bary.y + c2 * bary.z;
                    insertVoxel(uvec3(x, y, z), normal, color);
                }
            }
        }
    }
}

void main() {
    const uint work = constants.triangleCount/(gl_WorkGroupSize.x*gl_NumWorkGroups.x);
    for (uint i = 0; i < work; i++) {
        uint triangleIndex = work * i + gl_GlobalInvocationID.x;
        if (triangleIndex >= constants.triangleCount) break;
        voxelizeTriangle(triangleIndex + constants.triangleOffset);
    }
}